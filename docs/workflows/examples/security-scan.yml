name: Security Scanning

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 6 * * *'  # Daily at 6 AM UTC
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: read

concurrency:
  group: security-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # Dependency vulnerability scanning
  dependency-scan:
    name: Dependency Vulnerabilities
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          
      - name: Install dependencies
        run: |
          npm ci
          pip install -e .[dev,all]
          pip install safety bandit semgrep
          
      - name: Run npm audit
        run: |
          npm audit --audit-level=moderate
          npm audit --json > npm-audit-results.json || true
          
      - name: Run Python safety check
        run: |
          safety check --json --output safety-results.json || true
          safety check --short-report
          
      - name: Upload dependency scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: dependency-scan-results
          path: |
            npm-audit-results.json
            safety-results.json

  # Static Application Security Testing (SAST)
  sast-scan:
    name: Static Security Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          
      - name: Install security tools
        run: |
          pip install bandit semgrep safety
          npm install -g eslint-plugin-security
          
      - name: Run Bandit (Python SAST)
        run: |
          bandit -r src/ quantum-tests/ -f json -o bandit-results.json || true
          bandit -r src/ quantum-tests/ -f txt
          
      - name: Run Semgrep
        run: |
          semgrep --config=auto --json --output=semgrep-results.json src/ || true
          semgrep --config=auto src/
          
      - name: Run ESLint Security Plugin
        run: |
          npx eslint src/ tests/ --ext .js,.ts --format json --output-file eslint-security-results.json || true
          npx eslint src/ tests/ --ext .js,.ts
          
      - name: Upload SAST results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: sast-scan-results
          path: |
            bandit-results.json
            semgrep-results.json
            eslint-security-results.json

  # CodeQL Analysis
  codeql-analysis:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    strategy:
      fail-fast: false
      matrix:
        language: [ 'javascript', 'python' ]
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          queries: security-extended,security-and-quality
          
      - name: Setup Python (for Python analysis)
        if: matrix.language == 'python'
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install Python dependencies (for Python analysis)
        if: matrix.language == 'python'
        run: pip install -e .[dev,all]
        
      - name: Setup Node.js (for JavaScript analysis)
        if: matrix.language == 'javascript'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install Node.js dependencies (for JavaScript analysis)
        if: matrix.language == 'javascript'
        run: npm ci
        
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"

  # Container image security scanning
  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Build Docker image
        run: |
          docker build -t quantum-devops-ci:security-scan .
          
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'quantum-devops-ci:security-scan'
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
          
      - name: Run Trivy filesystem scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-fs-results.sarif'
          
      - name: Upload Trivy filesystem results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-fs-results.sarif'

  # Secrets scanning
  secrets-scan:
    name: Secrets Detection
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Run TruffleHog
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified
          
      - name: Run GitLeaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Quantum-specific security checks
  quantum-security:
    name: Quantum Security Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          
      - name: Install quantum dependencies
        run: |
          pip install -e .[dev,all]
          pip install qiskit[visualization] cirq pennylane
          
      - name: Quantum circuit security analysis
        run: |
          python -c "
          import os
          import json
          from pathlib import Path
          
          # Scan for potential quantum security issues
          issues = []
          
          # Check for hardcoded quantum credentials
          for file_path in Path('.').rglob('*.py'):
              try:
                  content = file_path.read_text()
                  if 'ibmq_token' in content.lower():
                      issues.append(f'Potential hardcoded IBMQ token in {file_path}')
                  if 'aws_access_key' in content.lower():
                      issues.append(f'Potential hardcoded AWS key in {file_path}')
                  if 'quantum_api_key' in content.lower():
                      issues.append(f'Potential hardcoded quantum API key in {file_path}')
              except:
                  pass
          
          # Check for insecure quantum operations
          for file_path in Path('.').rglob('*.py'):
              try:
                  content = file_path.read_text()
                  if 'run_quantum_job' in content and 'verify=False' in content:
                      issues.append(f'Insecure quantum job execution in {file_path}')
              except:
                  pass
          
          if issues:
              print('Quantum security issues found:')
              for issue in issues:
                  print(f'  - {issue}')
              exit(1)
          else:
              print('No quantum security issues found')
          "
          
      - name: Check quantum experiment permissions
        run: |
          echo "Checking quantum experiment permissions and access controls"
          # Add quantum-specific permission checks
          
      - name: Validate quantum configurations
        run: |
          python -m quantum_devops_ci.linting.cli security-check \
            --check-credentials \
            --check-permissions \
            --check-encryption

  # Security report generation
  security-report:
    name: Security Report
    runs-on: ubuntu-latest
    needs: [dependency-scan, sast-scan, codeql-analysis, container-scan, secrets-scan, quantum-security]
    if: always()
    
    steps:
      - name: Download all scan results
        uses: actions/download-artifact@v4
        with:
          path: scan-results/
          
      - name: Generate security report
        run: |
          echo "# Security Scan Report" > security-report.md
          echo "" >> security-report.md
          echo "**Scan Date:** $(date)" >> security-report.md
          echo "**Repository:** ${{ github.repository }}" >> security-report.md
          echo "**Branch:** ${{ github.ref_name }}" >> security-report.md
          echo "**Commit:** ${{ github.sha }}" >> security-report.md
          echo "" >> security-report.md
          
          echo "## Scan Results" >> security-report.md
          echo "" >> security-report.md
          
          # Check each job result
          if [[ "${{ needs.dependency-scan.result }}" == "success" ]]; then
            echo "✅ **Dependency Scan:** No critical vulnerabilities found" >> security-report.md
          else
            echo "❌ **Dependency Scan:** Issues found - review artifacts" >> security-report.md
          fi
          
          if [[ "${{ needs.sast-scan.result }}" == "success" ]]; then
            echo "✅ **SAST Scan:** No critical security issues found" >> security-report.md
          else
            echo "❌ **SAST Scan:** Issues found - review artifacts" >> security-report.md
          fi
          
          if [[ "${{ needs.codeql-analysis.result }}" == "success" ]]; then
            echo "✅ **CodeQL Analysis:** No critical vulnerabilities found" >> security-report.md
          else
            echo "❌ **CodeQL Analysis:** Issues found - check Security tab" >> security-report.md
          fi
          
          if [[ "${{ needs.container-scan.result }}" == "success" ]]; then
            echo "✅ **Container Scan:** No critical vulnerabilities found" >> security-report.md
          else
            echo "❌ **Container Scan:** Issues found - check Security tab" >> security-report.md
          fi
          
          if [[ "${{ needs.secrets-scan.result }}" == "success" ]]; then
            echo "✅ **Secrets Scan:** No secrets detected" >> security-report.md
          else
            echo "❌ **Secrets Scan:** Potential secrets found - immediate action required" >> security-report.md
          fi
          
          if [[ "${{ needs.quantum-security.result }}" == "success" ]]; then
            echo "✅ **Quantum Security:** No quantum-specific security issues found" >> security-report.md
          else
            echo "❌ **Quantum Security:** Quantum-specific issues found - review quantum configurations" >> security-report.md
          fi
          
          echo "" >> security-report.md
          echo "## Next Steps" >> security-report.md
          echo "" >> security-report.md
          echo "1. Review all scan artifacts for detailed findings" >> security-report.md
          echo "2. Address any critical or high-severity issues immediately" >> security-report.md
          echo "3. Update dependencies with known vulnerabilities" >> security-report.md
          echo "4. Review and remediate any secrets or credentials found" >> security-report.md
          echo "5. Ensure quantum-specific security configurations are properly set" >> security-report.md
          
      - name: Upload security report
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: security-report.md
          
      - name: Add report to job summary
        run: |
          cat security-report.md >> $GITHUB_STEP_SUMMARY
          
      - name: Comment on PR (if applicable)
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('security-report.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## Security Scan Results\n\n${report}`
            });
# Production Dockerfile for Quantum DevOps CI
# Multi-stage build for optimized production image

# Stage 1: Build environment
FROM node:18-alpine AS node-builder

WORKDIR /app

# Copy package files
COPY package*.json ./
RUN npm ci --only=production && npm cache clean --force

# Stage 2: Python build environment
FROM python:3.11-slim AS python-builder

# Install system dependencies for quantum frameworks
RUN apt-get update && apt-get install -y \
    gcc \
    g++ \
    gfortran \
    libopenblas-dev \
    libffi-dev \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /app

# Copy Python requirements
COPY pyproject.toml ./
COPY src/ src/

# Install Python dependencies
RUN pip install --no-cache-dir -e .[all] && \
    pip install --no-cache-dir gunicorn uvicorn && \
    find /usr/local -type d -name __pycache__ -exec rm -rf {} + || true

# Stage 3: Production runtime
FROM python:3.11-slim AS production

# Create non-root user
RUN groupadd -r quantum && useradd --no-log-init -r -g quantum quantum

# Install runtime dependencies
RUN apt-get update && apt-get install -y \
    curl \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

WORKDIR /app

# Copy Node.js and npm from node-builder
COPY --from=node-builder /usr/local/lib/node_modules /usr/local/lib/node_modules
COPY --from=node-builder /usr/local/bin/node /usr/local/bin/node
COPY --from=node-builder /usr/local/bin/npm /usr/local/bin/npm

# Copy built Python packages
COPY --from=python-builder /usr/local/lib/python3.11/site-packages /usr/local/lib/python3.11/site-packages
COPY --from=python-builder /usr/local/bin /usr/local/bin

# Copy application code
COPY --from=node-builder /app/node_modules ./node_modules
COPY src/ src/
COPY examples/ examples/
COPY quantum-tests/ quantum-tests/
COPY package*.json ./
COPY pyproject.toml ./
COPY quantum.config.yml ./

# Create required directories
RUN mkdir -p /app/logs /app/cache /app/config && \
    chown -R quantum:quantum /app

# Switch to non-root user
USER quantum

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD curl -f http://localhost:8080/health || exit 1

# Expose ports
EXPOSE 8080 9090

# Environment variables
ENV NODE_ENV=production \
    QUANTUM_ENV=production \
    PYTHONPATH=/app/src \
    LOG_LEVEL=info \
    ENABLE_MONITORING=true

# Start command
CMD ["python", "-m", "quantum_devops_ci.cli", "serve", "--host", "0.0.0.0", "--port", "8080"]